#!/bin/sh

. /usr/sbin/env_secrets_expand

# Adapted from https://github.com/woxxy/MySQL-backup-to-Amazon-S3

if [[ -z "${AWS_ACCESS_KEY}" || -z "${AWS_SECRET_KEY}" || -z "${S3_BUCKET}" || -z "${S3_PATH}" || -z "${S3_BUCKET_LOCATION}" ]]; then
    echo "One or more AWS/S3 related environment variables are undefined. Exiting..."
    exit 1
fi

if [[ -z "${MYSQL_DATABASE}" || -z "${MYSQL_USER}" || -z "${MYSQL_PASSWORD}" || -z "${MYSQL_HOST}" ]]; then
    echo "One or more MYSQL environment variables are undefined. Exiting..."
    exit 1
fi

if [[ -z "${BACKUP}" ]]; then
    echo "BACKUP has not been set, exiting..."
    exit 1
fi


TIMESTAMP=$(date +"%Y-%m-%d_%H-%M")
PERIOD=${1-hourly}
BACKUPS_TO_KEEP=3

echo "Selected period: $PERIOD."

#tmp path.
TMP_PATH=/tmp

echo "Starting backing up the database to a file..."

# dump all databases
mysqldump --single-transaction --host=${MYSQL_HOST} --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} ${MYSQL_DATABASE} > ${TMP_PATH}/dump_${TIMESTAMP}.sql

if [ $? -gt 0 ]; then
    exit $?
fi

echo "Done backing up the database to a file."
echo "Starting compression..."

tar czf ${TMP_PATH}/${TIMESTAMP}.tar.gz -C ${TMP_PATH} dump_${TIMESTAMP}.sql

echo "Done compressing the backup file."

# upload

echo "Uploading the new backup..."
s3cmd put -f ${TMP_PATH}/${TIMESTAMP}.tar.gz s3://${S3_BUCKET}/${S3_PATH}/${PERIOD}/
echo "New backup uploaded."

# Delete old backups

BACKUP_COUNT=$(s3cmd ls s3://${S3_BUCKET}/${S3_PATH}/${PERIOD}/ | wc -l)
BACKUPS_TO_DELETE=$(expr $BACKUP_COUNT - $BACKUPS_TO_KEEP)

if [ $BACKUPS_TO_DELETE -gt 0 ]; then

    echo "Removing $BACKUPS_TO_DELETE old backups"

    s3cmd ls s3://${S3_BUCKET}/${S3_PATH}/${PERIOD}/ | head -n${BACKUPS_TO_DELETE} | awk '{print $4}' | while read file; do s3cmd rm $file; done

    echo "Old backups removed"

fi

echo "Removing the cache files..."
# remove databases dump
rm ${TMP_PATH}/dump_${TIMESTAMP}.sql
rm ${TMP_PATH}/${TIMESTAMP}.tar.gz
echo "Files removed."
echo "All done."
